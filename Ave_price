{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOHaVdPnAhZlfdF3SmDYkRp",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yt49/-Market-analysis-Ave_price/blob/main/Ave_price\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rHGlcBhoZGn7"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import base64\n",
        "from io import BytesIO\n",
        "\n",
        "def calculate_avg_price_yps_wood(model_data, months):\n",
        "    total_value = model_data['VALUE'].sum()\n",
        "    total_units = model_data['UNITS'].sum()\n",
        "    avg_price = (total_value / total_units) * 1000 if total_units else 0  # 平均単価を1000倍して計算\n",
        "    return avg_price\n",
        "\n",
        "def download_excel_yps_wood(data):\n",
        "    output_file_path = \"Wood平均単価.xlsx\"\n",
        "    data.to_excel(output_file_path, index=False)  # Excelファイルに保存\n",
        "    with open(output_file_path, \"rb\") as file:\n",
        "        excel_data = file.read()\n",
        "    b64 = base64.b64encode(excel_data).decode()\n",
        "    href = f'<a href=\"data:application/octet-stream;base64,{b64}\" download=\"{output_file_path}\">ダウンロード結果</a>'\n",
        "    return href\n",
        "\n",
        "def calculate_avg_price_yps_iron(model_data, months):\n",
        "    total_value = model_data['VALUE'].sum()\n",
        "    total_units = model_data['UNITS'].sum()\n",
        "    avg_price = total_value / total_units * 1000\n",
        "    return avg_price\n",
        "\n",
        "def download_excel_yps_iron(data):\n",
        "    output_file_path = \"Iron平均単価.xlsx\"\n",
        "    data.to_excel(output_file_path, index=False)\n",
        "    with open(output_file_path, \"rb\") as file:\n",
        "        excel_data = file.read()\n",
        "    b64 = base64.b64encode(excel_data).decode()\n",
        "    href = f'<a href=\"data:application/octet-stream;base64,{b64}\" download=\"{output_file_path}\">ダウンロード結果</a>'\n",
        "    return href\n",
        "\n",
        "def calculate_avg_price_gfk(model_data, months):\n",
        "    start_index = 0\n",
        "    end_index = min(months, len(model_data))  # 最初のnつのみ選択\n",
        "    model_data_filtered = model_data.iloc[start_index:end_index]\n",
        "    total_value = model_data_filtered['Sales Value KRW'].sum()\n",
        "    total_units = model_data_filtered['Sales Units'].sum()\n",
        "    avg_price = total_value / total_units if total_units else 0\n",
        "    return avg_price\n",
        "\n",
        "def download_excel_gfk(data, months):\n",
        "    file_name = f\"Gfk平均単価_{months}ヵ月.xlsx\"\n",
        "    output_file_path = f\"/tmp/{file_name}\"\n",
        "    data.to_excel(output_file_path, index=False)\n",
        "    with open(output_file_path, \"rb\") as file:\n",
        "        excel_data = file.read()\n",
        "    b64 = base64.b64encode(excel_data).decode()\n",
        "    href = f'<a href=\"data:application/octet-stream;base64,{b64}\" download=\"{file_name}\">クリックしてダウンロード</a>'\n",
        "    return href\n",
        "\n",
        "def calculate_avg_price_gdt(group, months):\n",
        "    end_date = group['Y+M'].min() + pd.DateOffset(months=months)\n",
        "    group = group[group['Y+M'] <= end_date]\n",
        "    total_sales = group['Unit Sales'].sum()\n",
        "    total_value = group['Value'].sum()\n",
        "    average_price = total_value / total_sales\n",
        "    return pd.Series({'Unit Sales': total_sales, 'Value': total_value, 'Average Price': average_price})\n",
        "\n",
        "def download_excel_gdt(data):\n",
        "    output = BytesIO()\n",
        "    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:\n",
        "        data.to_excel(writer, sheet_name='Off', index=False)\n",
        "    b64 = base64.b64encode(output.getvalue()).decode()\n",
        "    href = f'<a href=\"data:application/octet-stream;base64,{b64}\" download=\"USAaverage_price.xlsx\">クリックしてダウンロード</a>'\n",
        "    return href\n",
        "\n",
        "def main():\n",
        "    st.title('平均RU単価計算')\n",
        "\n",
        "    option = st.sidebar.selectbox(\n",
        "        'データセットを選択してください',\n",
        "        ('YPS_Wood', 'YPS_Iron', 'Gfk', 'GDT')\n",
        "    )\n",
        "\n",
        "    if option == 'YPS_Wood':\n",
        "        st.subheader('YPS Wood 平均単価計算')\n",
        "        st.write('**1. Excelファイルをアップロードしてください。**')\n",
        "        uploaded_file = st.file_uploader(\"Excelファイルを選択してください\", type=['xlsx'])\n",
        "\n",
        "        if uploaded_file is not None:\n",
        "            df = pd.read_excel(uploaded_file)\n",
        "            months = st.slider(\"計算する期間を選択してください（月数）\", 1, 24, 5)\n",
        "\n",
        "            if st.button('平均単価を計算'):\n",
        "                df_sorted = df.sort_values(by=['DATE', 'MODEL'])\n",
        "                df_filtered = df_sorted.groupby('MODEL').apply(lambda x: x.head(months)).reset_index(drop=True)\n",
        "                df_summed = df_filtered.groupby('MODEL').apply(calculate_avg_price_yps_wood, months=months).reset_index(name='Ave_Price')\n",
        "                df_filtered['9'] = df_filtered['9'].astype(str).replace({'1': 'CUSTOM', '2': 'NORMAL', '3': 'OTHERS'})\n",
        "                df_output = df_filtered[['DATE', 'BRAND', 'SUB BRAND', 'MODEL', '性別', 'シャフト', 'ﾀｲﾌﾟ', '9']].drop_duplicates('MODEL')\n",
        "                df_output = pd.merge(df_output, df_summed, on='MODEL', how='left')\n",
        "                st.markdown(download_excel_yps_wood(df_output), unsafe_allow_html=True)\n",
        "\n",
        "    elif option == 'YPS_Iron':\n",
        "        st.subheader('YPS Iron 平均単価計算')\n",
        "        st.write('**1. Excelファイルをアップロードしてください。**')\n",
        "        uploaded_file = st.file_uploader(\"Excelファイルを選択してください\", type=['xlsx'])\n",
        "\n",
        "        if uploaded_file is not None:\n",
        "            df = pd.read_excel(uploaded_file)\n",
        "            months = st.slider(\"計算する期間を選択してください（月数）\", 1, 24, 5)\n",
        "\n",
        "            if st.button('平均単価を計算'):\n",
        "                df_sorted = df.sort_values(by=['DATE', 'MODEL'])\n",
        "                df_filtered = df_sorted.groupby('MODEL').apply(lambda x: x.head(months)).reset_index(drop=True)\n",
        "                df_summed = df_filtered.groupby('MODEL').agg({'UNITS': 'sum', 'VALUE': 'sum'}).reset_index()\n",
        "                df_summed['Ave_Price'] = df_summed['VALUE'] / df_summed['UNITS'] * 1000\n",
        "                df_filtered[['2', '4', '7']] = df_filtered[['2', '4', '7']].astype(str)\n",
        "                df_output = df_filtered[['DATE', 'BRAND', 'SUB BRAND', 'MODEL', '2', '4', '7']].drop_duplicates('MODEL')\n",
        "                df_output = pd.merge(df_output, df_summed[['MODEL', 'Ave_Price']], on='MODEL', how='left')\n",
        "                output_file_path = \"Iron平均単価.xlsx\"\n",
        "                df_output.to_excel(output_file_path, index=False)\n",
        "                st.write('**計算結果のダウンロード**')\n",
        "                st.markdown(download_excel_yps_iron(df_output), unsafe_allow_html=True)\n",
        "\n",
        "    elif option == 'Gfk':\n",
        "        st.subheader('Gfk 平均単価計算')\n",
        "        st.write('**1. Excelファイルをアップロードしてください。**')\n",
        "        uploaded_file = st.file_uploader(\"Excelファイルを選択してください\", type=['xlsx'])\n",
        "\n",
        "        if uploaded_file is not None:\n",
        "            data = pd.read_excel(uploaded_file)\n",
        "            months = st.slider(\"計算する期間を選択してください（月数）\", 1, 24, 5)\n",
        "\n",
        "            if st.button('平均単価を計算'):\n",
        "                result = data.groupby(['TYPE', 'BRAND', 'MODEL', 'USER TYPE', 'SHAFT MATERIAL', 'SHAFT FLEX']).apply(\n",
        "                    calculate_avg_price_gfk, months=months).reset_index(name='Ave_price')\n",
        "                st.markdown(download_excel_gfk(result, months), unsafe_allow_html=True)\n",
        "\n",
        "    elif option == 'GDT':\n",
        "        st.subheader('GDT 平均単価計算')\n",
        "        st.write('**1. Excelファイルをアップロードしてください。**')\n",
        "        uploaded_file = st.file_uploader(\"Excelファイルを選択してください\", type=['xlsx'])\n",
        "\n",
        "        if uploaded_file is not None:\n",
        "            df = pd.read_excel(uploaded_file)\n",
        "            df_selected = df[['Year', 'Month', 'On/Off', 'Product Type', 'Brand', 'Model', 'Unit Sales', 'Value']]\n",
        "            df_selected['Y+M'] = df_selected['Year'].astype(str) + '-' + df_selected['Month'].astype(str).str.zfill(2)\n",
        "            df_selected['Y+M'] = pd.to_datetime(df_selected['Y+M'], format='%Y-%m')\n",
        "            months = st.slider(\"計算する期間を選択してください（月数）\", 1, 24, 5)\n",
        "\n",
        "            if st.button('集計する'):\n",
        "                df_off = df_selected[df_selected['On/Off'] == 'off']\n",
        "                df_on = df_selected[df_selected['On/Off'] == 'on']\n",
        "                df_off_summed = df_off.groupby(['Model', 'On/Off', 'Product Type', 'Brand']).apply(\n",
        "                    calculate_avg_price_gdt, months=months).reset_index()\n",
        "                df_on_summed = df_on.groupby(['Model', 'On/Off', 'Product Type', 'Brand']).apply(\n",
        "                    calculate_avg_price_gdt, months=months).reset_index()\n",
        "                df_off_summed = df_off_summed[['On/Off', 'Product Type', 'Brand', 'Model', 'Unit Sales', 'Value', 'Average Price']]\n",
        "                df_on_summed = df_on_summed[['On/Off', 'Product Type', 'Brand', 'Model', 'Unit Sales', 'Value', 'Average Price']]\n",
        "                output = BytesIO()\n",
        "                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:\n",
        "                    df_off_summed.to_excel(writer, sheet_name='Off', index=False)\n",
        "                    df_on_summed.to_excel(writer, sheet_name='On', index=False)\n",
        "                b64 = base64.b64encode(output.getvalue()).decode()\n",
        "                href = f'<a href=\"data:application/octet-stream;base64,{b64}\" download=\"USAaverage_price.xlsx\">クリックしてダウンロード</a>'\n",
        "                st.markdown(href, unsafe_allow_html=True)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    }
  ]
}